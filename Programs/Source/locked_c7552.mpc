from Compiler.circuit import Circuit

sb64 = sbits.get_type(64)
sb14 = sbits.get_type(14)
circ = Circuit('locked_c7552')

# Get LL key from party 0
ll_key_0 = sbitvec(sb64.get_input_from(0))
ll_key_1 = sbitvec(sb64.get_input_from(0))

# Get inputs from party 1
test_vec_0 = sbitvec(sb64.get_input_from(1))
test_vec_1 = sbitvec(sb64.get_input_from(1))
test_vec_2 = sbitvec(sb64.get_input_from(1))
test_vec_3 = sbitvec(sb14.get_input_from(1))

print_ln('Logic locking key [0 : 64]: %s', ll_key_0.elements()[0].reveal().bit_decompose())
print_ln('Logic locking key [64:128]: %s', ll_key_1.elements()[0].reveal().bit_decompose())

print_ln('Test vectors: %s', test_vec_0.elements()[0].reveal().bit_decompose())
print_ln('Test vectors: %s', test_vec_1.elements()[0].reveal().bit_decompose())
print_ln('Test vectors: %s', test_vec_2.elements()[0].reveal().bit_decompose())
print_ln('Test vectors: %s', test_vec_3.elements()[0].reveal().bit_decompose())

result = circ(ll_key_0, ll_key_1, test_vec_0, test_vec_1, test_vec_2, test_vec_3)

print_ln('Out %s', result[0].elements()[0].reveal().bit_decompose())

